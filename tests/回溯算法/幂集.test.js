const {
  subsets,
} = require('@/回溯算法/幂集')

describe('幂集', () => {
  it('测试边界值', () => {
    expect(subsets([])).toEqual([[]])
    expect(subsets([1])).toEqual([[],[1]])
  })
  it('测试结果', () => {
    expect(subsets([1,2,3])).toEqual([[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]])
    expect(subsets([1,2,3,4,5,6])).toEqual([[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4],[5],[1,5],[2,5],[1,2,5],[3,5],[1,3,5],[2,3,5],[1,2,3,5],[4,5],[1,4,5],[2,4,5],[1,2,4,5],[3,4,5],[1,3,4,5],[2,3,4,5],[1,2,3,4,5],[6],[1,6],[2,6],[1,2,6],[3,6],[1,3,6],[2,3,6],[1,2,3,6],[4,6],[1,4,6],[2,4,6],[1,2,4,6],[3,4,6],[1,3,4,6],[2,3,4,6],[1,2,3,4,6],[5,6],[1,5,6],[2,5,6],[1,2,5,6],[3,5,6],[1,3,5,6],[2,3,5,6],[1,2,3,5,6],[4,5,6],[1,4,5,6],[2,4,5,6],[1,2,4,5,6],[3,4,5,6],[1,3,4,5,6],[2,3,4,5,6],[1,2,3,4,5,6]])
  })
})